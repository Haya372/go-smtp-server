// Code generated by MockGen. DO NOT EDIT.
// Source: internal/session/session.go

// Package mock is a generated GoMock package.
package mock

import (
	net "net"
	mail "net/mail"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AddEnvelopeTo mocks base method.
func (m *MockSession) AddEnvelopeTo(address mail.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEnvelopeTo", address)
}

// AddEnvelopeTo indicates an expected call of AddEnvelopeTo.
func (mr *MockSessionMockRecorder) AddEnvelopeTo(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvelopeTo", reflect.TypeOf((*MockSession)(nil).AddEnvelopeTo), address)
}

// Close mocks base method.
func (m *MockSession) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// CloseImmediately mocks base method.
func (m *MockSession) CloseImmediately() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseImmediately")
}

// CloseImmediately indicates an expected call of CloseImmediately.
func (mr *MockSessionMockRecorder) CloseImmediately() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseImmediately", reflect.TypeOf((*MockSession)(nil).CloseImmediately))
}

// EnvelopeFrom mocks base method.
func (m *MockSession) EnvelopeFrom() *mail.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvelopeFrom")
	ret0, _ := ret[0].(*mail.Address)
	return ret0
}

// EnvelopeFrom indicates an expected call of EnvelopeFrom.
func (mr *MockSessionMockRecorder) EnvelopeFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvelopeFrom", reflect.TypeOf((*MockSession)(nil).EnvelopeFrom))
}

// EnvelopeTo mocks base method.
func (m *MockSession) EnvelopeTo() []mail.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvelopeTo")
	ret0, _ := ret[0].([]mail.Address)
	return ret0
}

// EnvelopeTo indicates an expected call of EnvelopeTo.
func (mr *MockSessionMockRecorder) EnvelopeTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvelopeTo", reflect.TypeOf((*MockSession)(nil).EnvelopeTo))
}

// IP mocks base method.
func (m *MockSession) IP() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP.
func (mr *MockSessionMockRecorder) IP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockSession)(nil).IP))
}

// Id mocks base method.
func (m *MockSession) Id() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockSessionMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockSession)(nil).Id))
}

// IsCloseImmediately mocks base method.
func (m *MockSession) IsCloseImmediately() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCloseImmediately")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCloseImmediately indicates an expected call of IsCloseImmediately.
func (mr *MockSessionMockRecorder) IsCloseImmediately() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCloseImmediately", reflect.TypeOf((*MockSession)(nil).IsCloseImmediately))
}

// RawData mocks base method.
func (m *MockSession) RawData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RawData indicates an expected call of RawData.
func (mr *MockSessionMockRecorder) RawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawData", reflect.TypeOf((*MockSession)(nil).RawData))
}

// ReadLine mocks base method.
func (m *MockSession) ReadLine() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLine")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLine indicates an expected call of ReadLine.
func (mr *MockSessionMockRecorder) ReadLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLine", reflect.TypeOf((*MockSession)(nil).ReadLine))
}

// ReadRawData mocks base method.
func (m *MockSession) ReadRawData() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRawData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRawData indicates an expected call of ReadRawData.
func (mr *MockSessionMockRecorder) ReadRawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRawData", reflect.TypeOf((*MockSession)(nil).ReadRawData))
}

// Reset mocks base method.
func (m *MockSession) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockSessionMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSession)(nil).Reset))
}

// Response mocks base method.
func (m *MockSession) Response(code int, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Response", code, msg)
}

// Response indicates an expected call of Response.
func (mr *MockSessionMockRecorder) Response(code, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockSession)(nil).Response), code, msg)
}

// ResponseLine mocks base method.
func (m *MockSession) ResponseLine(line string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponseLine", line)
}

// ResponseLine indicates an expected call of ResponseLine.
func (mr *MockSessionMockRecorder) ResponseLine(line interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseLine", reflect.TypeOf((*MockSession)(nil).ResponseLine), line)
}

// SenderDomain mocks base method.
func (m *MockSession) SenderDomain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SenderDomain")
	ret0, _ := ret[0].(string)
	return ret0
}

// SenderDomain indicates an expected call of SenderDomain.
func (mr *MockSessionMockRecorder) SenderDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SenderDomain", reflect.TypeOf((*MockSession)(nil).SenderDomain))
}

// SetEnvelopeFrom mocks base method.
func (m *MockSession) SetEnvelopeFrom(address *mail.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnvelopeFrom", address)
}

// SetEnvelopeFrom indicates an expected call of SetEnvelopeFrom.
func (mr *MockSessionMockRecorder) SetEnvelopeFrom(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnvelopeFrom", reflect.TypeOf((*MockSession)(nil).SetEnvelopeFrom), address)
}

// SetRawData mocks base method.
func (m *MockSession) SetRawData(rawData []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRawData", rawData)
}

// SetRawData indicates an expected call of SetRawData.
func (mr *MockSessionMockRecorder) SetRawData(rawData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRawData", reflect.TypeOf((*MockSession)(nil).SetRawData), rawData)
}

// SetSenderDomain mocks base method.
func (m *MockSession) SetSenderDomain(domain string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSenderDomain", domain)
}

// SetSenderDomain indicates an expected call of SetSenderDomain.
func (mr *MockSessionMockRecorder) SetSenderDomain(domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSenderDomain", reflect.TypeOf((*MockSession)(nil).SetSenderDomain), domain)
}
